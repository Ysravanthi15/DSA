=====================Buddy Strings======================

class Solution {
    public boolean buddyStrings(String s, String goal) {
        if (s.length() != goal.length()) return false;

        // Case 1: If both strings are equal
        if (s.equals(goal)) {
            // Check if there is at least one duplicate character
            int[] count = new int[26];
            for (char c : s.toCharArray()) {
                count[c - 'a']++;
                if (count[c - 'a'] > 1) return true;
            }
            return false;
        }

        // Case 2: Strings are different
        int first = -1, second = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != goal.charAt(i)) {
                if (first == -1) first = i;
                else if (second == -1) second = i;
                else return false; // More than 2 mismatches
            }
        }

        // Check if swapping makes strings equal
        return second != -1 && 
               s.charAt(first) == goal.charAt(second) && 
               s.charAt(second) == goal.charAt(first);
   

    }
}
Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
Example 2:

Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.
